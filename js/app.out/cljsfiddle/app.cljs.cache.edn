;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name cljsfiddle.app, :imports nil, :requires {pex cljsfiddle.parinfer-codemirror.example, reagent.core reagent.core, r reagent.core, cljs.js cljs.js, cljsfiddle.state cljsfiddle.state, cljsfiddle.parinfer-codemirror.editor cljsfiddle.parinfer-codemirror.editor, cljsfiddle.samples-pane cljsfiddle.samples-pane, cemerick.url cemerick.url, cljsfiddle.parinfer-codemirror.example cljsfiddle.parinfer-codemirror.example, cljsfiddle.gist cljsfiddle.gist, url cemerick.url, gist cljsfiddle.gist}, :uses {samples-pane cljsfiddle.samples-pane, empty-state cljs.js, state cljsfiddle.state, start-editor-sync! cljsfiddle.parinfer-codemirror.editor, read-state cljsfiddle.state, eval-str cljs.js, js-eval cljs.js, update-text cljsfiddle.state}, :defs {check-load-gist {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 142, :column 7, :end-line 142, :end-column 22, :arglists (quote ([]))}, :name cljsfiddle.app/check-load-gist, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, my-eval {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 14, :column 7, :end-line 14, :end-column 14, :arglists (quote ([cljs-string]))}, :name cljsfiddle.app/my-eval, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 14, :method-params ([cljs-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cljs-string]))}, clear {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 34, :column 7, :end-line 34, :end-column 12, :arglists (quote ([]))}, :name cljsfiddle.app/clear, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, code-mirror {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([]))}, :name cljsfiddle.app/code-mirror, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, cljs-pane {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 83, :column 7, :end-line 83, :end-column 16, :arglists (quote ([]))}, :name cljsfiddle.app/cljs-pane, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 42, :column 7, :end-line 42, :end-column 10, :arglists (quote ([]))}, :name cljsfiddle.app/run, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, home {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([]))}, :name cljsfiddle.app/home, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *er {:name cljsfiddle.app/*er, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 30, :column 19, :end-line 30, :end-column 27, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 30, :column 24, :end-line 30, :end-column 27}}, init {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 154, :column 7, :end-line 154, :end-column 11, :arglists (quote ([]))}, :name cljsfiddle.app/init, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, dom-pane {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 98, :column 7, :end-line 98, :end-column 15, :arglists (quote ([]))}, :name cljsfiddle.app/dom-pane, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, fake-requires {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 57, :column 7, :end-line 57, :end-column 20, :arglists (quote ([]))}, :name cljsfiddle.app/fake-requires, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, header {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 107, :column 7, :end-line 107, :end-column 13, :arglists (quote ([]))}, :name cljsfiddle.app/header, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, footer {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 119, :column 7, :end-line 119, :end-column 13, :arglists (quote ([]))}, :name cljsfiddle.app/footer, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, toggle-loading {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :line 150, :column 7, :end-line 150, :end-column 21, :arglists (quote ([]))}, :name cljsfiddle.app/toggle-loading, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/app.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {r reagent.core, reagent.core reagent.core, cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{:load :statement :div.ui.right.labeled.icon.primary.button :span.cm-atom :static-fns :i.play.icon :min-height :div.ui.grid :font-size :alt :div.ui.item :div#baby-dom-target :ns :span.cm-bracket :def-emits-var :margin-left :value :pre.CodeMirror-line :component-did-mount :background-color :default-value :width :src :source :div.inner-wrapper :footer :header :padding-right :on-click :span.cm-builtin :span.cm-variable :style :lang :div :h4 :codemirror-box :reagent-render :div.row :div.ui.fluid.container :hr.heading :div.CodeMirror-code :textarea#codezone :padding :div#save-btn.ui.right.labeled.icon.button :span.cm-bracket.cm-eol :code :context :error :h2 :div.seven.wide.column :span.cm-keyword :span.tld :i.save.icon :h1 :border dummy-symbol :span.cm-def :div.cm-s-default.CodeMirror :clj :p :div.ui.form :margin-bottom :href :div.ui.right.labeled.icon.button :img :a :height :span cljs.user :i.erase.icon :eval}, :order [dummy-symbol :ns :eval :static-fns :def-emits-var :load :context cljs.user :lang :source :clj :statement :error :value :div.ui.item :p :code :h4 :reagent-render :component-did-mount :div :style :border :textarea#codezone :default-value :codemirror-box :div.cm-s-default.CodeMirror :height :margin-bottom :div.CodeMirror-code :pre.CodeMirror-line :span :padding-right :span.cm-bracket :span.cm-keyword :span.cm-def :span.cm-atom :span.cm-variable :span.cm-builtin :span.cm-bracket.cm-eol :div.seven.wide.column :h2 :div.ui.right.labeled.icon.primary.button :on-click :margin-left :i.play.icon :div#save-btn.ui.right.labeled.icon.button :i.save.icon :hr.heading :div.ui.form :div.ui.right.labeled.icon.button :i.erase.icon :div#baby-dom-target :font-size :header :div.inner-wrapper :h1 :img :src :alt :span.tld :footer :a :href :width :div.ui.fluid.container :padding :min-height :background-color :div.ui.grid :div.row]}, :doc nil}