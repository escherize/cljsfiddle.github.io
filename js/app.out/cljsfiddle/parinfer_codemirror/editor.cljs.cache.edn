;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name cljsfiddle.parinfer-codemirror.editor, :imports nil, :requires {clojure.string clojure.string, cljsfiddle.state cljsfiddle.state, cljsfiddle.parinfer-codemirror.editor-support cljsfiddle.parinfer-codemirror.editor-support, gdom goog.dom, goog.dom goog.dom}, :uses {get-prev-state cljsfiddle.parinfer-codemirror.editor-support, set-frame-updated! cljsfiddle.parinfer-codemirror.editor-support, join clojure.string, frame-updated? cljsfiddle.parinfer-codemirror.editor-support, fix-text! cljsfiddle.parinfer-codemirror.editor-support, update-cursor! cljsfiddle.parinfer-codemirror.editor-support, state cljsfiddle.state, empty-editor-state cljsfiddle.state, IEditor cljsfiddle.parinfer-codemirror.editor-support, cm-key cljsfiddle.parinfer-codemirror.editor-support}, :defs {frame-updates {:name cljsfiddle.parinfer-codemirror.editor/frame-updates, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 22, :column 1, :end-line 22, :end-column 19, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 22, :column 6, :end-line 22, :end-column 19}}, before-change {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 24, :column 7, :end-line 24, :end-column 20, :arglists (quote ([cm change])), :doc "Called before any change is applied to the editor."}, :name cljsfiddle.parinfer-codemirror.editor/before-change, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :end-column 20, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Called before any change is applied to the editor."}, on-change {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 33, :column 7, :end-line 33, :end-column 16, :arglists (quote ([cm change])), :doc "Called after any change is applied to the editor."}, :name cljsfiddle.parinfer-codemirror.editor/on-change, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :end-column 16, :method-params ([cm change]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cm change])), :doc "Called after any change is applied to the editor."}, on-cursor-activity {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 41, :column 7, :end-line 41, :end-column 25, :arglists (quote ([cm])), :doc "Called after the cursor moves in the editor."}, :name cljsfiddle.parinfer-codemirror.editor/on-cursor-activity, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :end-column 25, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Called after the cursor moves in the editor."}, parinferize! {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([cm key- parinfer-mode initial-value])), :doc "Add parinfer goodness to a codemirror editor"}, :name cljsfiddle.parinfer-codemirror.editor/parinferize!, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :end-column 19, :method-params ([cm key- parinfer-mode initial-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 4, :fn-var true, :arglists (quote ([cm key- parinfer-mode initial-value])), :doc "Add parinfer goodness to a codemirror editor"}, on-state-change {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 87, :column 7, :end-line 87, :end-column 22, :arglists (quote ([_ _ old-state new-state])), :doc "Called everytime the state changes to sync the code editor."}, :name cljsfiddle.parinfer-codemirror.editor/on-state-change, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :end-column 22, :method-params ([_ _ old-state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists (quote ([_ _ old-state new-state])), :doc "Called everytime the state changes to sync the code editor."}, force-editor-sync! {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 95, :column 7, :end-line 95, :end-column 25, :arglists (quote ([]))}, :name cljsfiddle.parinfer-codemirror.editor/force-editor-sync!, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start-editor-sync! {:protocol-inline nil, :meta {:file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :line 99, :column 7, :end-line 99, :end-column 25, :arglists (quote ([]))}, :name cljsfiddle.parinfer-codemirror.editor/start-editor-sync!, :variadic false, :file "/Users/bcm/.boot/cache/tmp/Users/bcm/dv/cljsfiddle/1dub/-grrwi1/cljsfiddle/parinfer_codemirror/editor.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:frame-updated? :mode :cm :change :editor-updater :text}, :order [:change :mode :text :cm :frame-updated? :editor-updater]}, :doc "Glues Parinfer's formatter to a CodeMirror editor"}